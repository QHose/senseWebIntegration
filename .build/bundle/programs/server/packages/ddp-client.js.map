{"version":3,"sources":["meteor://ðŸ’»app/packages/ddp-client/stream_client_nodejs.js","meteor://ðŸ’»app/packages/ddp-client/stream_client_common.js","meteor://ðŸ’»app/packages/ddp-client/livedata_common.js","meteor://ðŸ’»app/packages/ddp-client/random_stream.js","meteor://ðŸ’»app/packages/ddp-client/livedata_connection.js","meteor://ðŸ’»app/packages/ddp-client/namespace.js","meteor://ðŸ’»app/packages/ddp-client/id_map.js"],"names":["module1","module","DDP","LivedataTest","watch","require","v","ClientStream","endpoint","options","self","Object","assign","retry","client","headers","npmFayeOptions","_initCommon","_launchConnection","send","data","currentStatus","connected","_changeUrl","url","_onConnect","Error","_forcedToDisconnect","close","_clearConnectionTimer","status","retryCount","statusChanged","_","each","eventCallbacks","reset","callback","_cleanup","maybeError","disconnect","connectionTimer","clearTimeout","_getProxyUrl","targetUrl","proxy","process","env","HTTP_PROXY","http_proxy","match","HTTPS_PROXY","https_proxy","FayeWebSocket","Npm","deflate","toWebsocketUrl","fayeOptions","extensions","extend","proxyUrl","origin","subprotocols","Client","Meteor","setTimeout","_lostConnection","ConnectionError","CONNECT_TIMEOUT","on","bindEnvironment","clientOnIfCurrent","event","description","f","apply","arguments","error","_dontPrintErrors","_debug","message","startsWith","str","starts","length","substring","endsWith","ends","translateUrl","newSchemeBase","subPath","ddpUrlMatch","httpUrlMatch","newScheme","urlAfterDDP","substr","slashPos","indexOf","host","rest","replace","Math","floor","Random","fraction","urlAfterHttp","_relativeToSiteRootUrl","toSockjsUrl","ret","prototype","name","push","connectTimeoutMs","statusListeners","Tracker","Dependency","changed","_retry","Retry","reconnect","_sockjsOptions","_force","ForcedReconnectError","clear","_retryNow","_permanent","_error","reason","_retryLater","_online","timeout","errorType","retryLater","bind","retryTime","Date","getTime","depend","makeErrorType","SUPPORTED_DDP_VERSIONS","DDPCommon","_CurrentInvocation","EnvironmentVariable","randomStream","scope","get","RandomStream","MongoIDMap","isServer","path","Fiber","Future","join","Connection","onConnected","onDDPVersionNegotiationFailure","heartbeatInterval","heartbeatTimeout","reloadWithOutstanding","supportedDDPVersions","respondToPings","bufferedWritesInterval","bufferedWritesMaxAge","onReconnect","_stream","_lastSessionId","_versionSuggestion","_version","_stores","_methodHandlers","_nextMethodId","_supportedDDPVersions","_heartbeatInterval","_heartbeatTimeout","_methodInvokers","_outstandingMethodBlocks","_documentsWrittenByStub","_serverDocuments","_afterUpdateCallbacks","_messagesBufferedUntilQuiescence","_methodsBlockingQuiescence","_subsBeingRevived","_resetStores","_updatesForUnknownStores","_retryMigrate","__flushBufferedWrites","_flushBufferedWrites","_bufferedWrites","_bufferedWritesFlushAt","_bufferedWritesFlushHandle","_bufferedWritesInterval","_bufferedWritesMaxAge","_subscriptions","_userId","_userIdDeps","isClient","Package","reload","Reload","_onMigrate","_readyToMigrate","onMessage","raw_msg","msg","parseDDP","e","_heartbeat","messageReceived","server_id","_livedata_connected","contains","version","_send","id","include","_livedata_data","_livedata_nosub","_livedata_result","_livedata_error","onReset","session","support","currentMethodBlock","methods","filter","methodInvoker","sentMessage","noRetry","receiveResult","isEmpty","shift","m","_callOnReconnectAndSendAppropriateOutstandingMethods","_sendOutstandingMethods","sub","params","onDisconnect","stop","MethodInvoker","methodId","_callback","_connection","connection","_message","_onResultReceived","onResultReceived","_wait","wait","_methodResult","_dataVisible","sendMessage","gotResult","_maybeInvokeCallback","_outstandingMethodFinished","err","result","dataVisible","registerStore","wrappedStore","store","method","undefined","queued","beginUpdate","update","endUpdate","subscribe","Array","slice","call","callbacks","lastParam","isFunction","onReady","pop","any","onError","onStop","existing","find","inactive","EJSON","equals","ready","readyCallback","errorCallback","stopCallback","clone","readyDeps","remove","handle","has","record","subscriptionId","active","onInvalidate","c","afterFlush","_subscribeAndWait","args","onLateError","concat","func","enclosing","alreadyInSimulation","isSimulation","randomSeed","randomSeedGenerator","makeRpcSeed","stub","setUserId","userId","invocation","MethodInvocation","_saveOriginals","stubReturnValue","withValue","_noYieldsAllowed","exception","_retrieveAndStoreOriginals","throwStubExceptions","expected","stack","future","resolver","last","returnStubValue","_waitingForQuiescence","s","saveOriginals","docsWritten","collection","originals","retrieveOriginals","forEach","doc","serverDoc","setDefault","writtenByStubs","document","flushCallbacks","_unsubscribeAll","obj","stringifyDDP","_anyMethodsAreOutstanding","pluck","Heartbeat","onTimeout","sendPing","start","reconnectedToPreviousSession","invoker","_runAfterUpdateCallbacks","_processOneDataMessage","updates","subs","subId","bufferedMsg","standardWrite","valueOf","writes","_performWrites","storeName","updateMessages","updateMessage","_pushUpdate","_getServerDoc","serverDocsForCollection","_process_added","MongoID","idParse","isExisting","fields","_id","currentDoc","getDoc","_process_changed","DiffSequence","applyChanges","_process_removed","_process_updated","written","JSON","stringify","idStringify","callbackInvoker","_runWhenAllServerDocsAreFlushed","_process_ready","subRecord","runFAfterUpdates","unflushedServerDocCount","onServerDocFlush","collectionDocs","writtenByStubForAMethodWithSentMessage","dummy","meteorErrorFromMsg","msgArg","details","_process_nosub","i","splice","firstBlock","_maybeMigrate","offendingMessage","oldOutstandingMethodBlocks","block","connect","allConnections","_allSubscriptionsReady","all","conn","export","IdMap"],"mappings":"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","file":"/packages/ddp-client.js","sourcesContent":["import { DDP, LivedataTest } from \"./namespace.js\";\n\n// @param endpoint {String} URL to Meteor app\n//   \"http://subdomain.meteor.com/\" or \"/\" or\n//   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n//\n// We do some rewriting of the URL to eventually make it \"ws://\" or \"wss://\",\n// whatever was passed in.  At the very least, what Meteor.absoluteUrl() returns\n// us should work.\n//\n// We don't do any heartbeating. (The logic that did this in sockjs was removed,\n// because it used a built-in sockjs mechanism. We could do it with WebSocket\n// ping frames or with DDP-level messages.)\nLivedataTest.ClientStream = class ClientStream {\n  constructor(endpoint, options) {\n    const self = this;\n    options = options || {};\n\n    self.options = Object.assign({\n      retry: true\n    }, options);\n\n    self.client = null;  // created in _launchConnection\n    self.endpoint = endpoint;\n\n    self.headers = self.options.headers || {};\n    self.npmFayeOptions = self.options.npmFayeOptions || {};\n\n    self._initCommon(self.options);\n\n    //// Kickoff!\n    self._launchConnection();\n  }\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send(data) {\n    var self = this;\n    if (self.currentStatus.connected) {\n      self.client.send(data);\n    }\n  }\n\n  // Changes where this connection points\n  _changeUrl(url) {\n    var self = this;\n    self.endpoint = url;\n  }\n\n  _onConnect(client) {\n    var self = this;\n\n    if (client !== self.client) {\n      // This connection is not from the last call to _launchConnection.\n      // But _launchConnection calls _cleanup which closes previous connections.\n      // It's our belief that this stifles future 'open' events, but maybe\n      // we are wrong?\n      throw new Error(\"Got open from inactive client \" + !!self.client);\n    }\n\n    if (self._forcedToDisconnect) {\n      // We were asked to disconnect between trying to open the connection and\n      // actually opening it. Let's just pretend this never happened.\n      self.client.close();\n      self.client = null;\n      return;\n    }\n\n    if (self.currentStatus.connected) {\n      // We already have a connection. It must have been the case that we\n      // started two parallel connection attempts (because we wanted to\n      // 'reconnect now' on a hanging connection and we had no way to cancel the\n      // connection attempt.) But this shouldn't happen (similarly to the client\n      // !== self.client check above).\n      throw new Error(\"Two parallel connections?\");\n    }\n\n    self._clearConnectionTimer();\n\n    // update status\n    self.currentStatus.status = \"connected\";\n    self.currentStatus.connected = true;\n    self.currentStatus.retryCount = 0;\n    self.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    _.each(self.eventCallbacks.reset, function (callback) { callback(); });\n  }\n\n  _cleanup(maybeError) {\n    var self = this;\n\n    self._clearConnectionTimer();\n    if (self.client) {\n      var client = self.client;\n      self.client = null;\n      client.close();\n\n      _.each(self.eventCallbacks.disconnect, function (callback) {\n        callback(maybeError);\n      });\n    }\n  }\n\n  _clearConnectionTimer() {\n    var self = this;\n\n    if (self.connectionTimer) {\n      clearTimeout(self.connectionTimer);\n      self.connectionTimer = null;\n    }\n  }\n\n  _getProxyUrl(targetUrl) {\n    var self = this;\n    // Similar to code in tools/http-helpers.js.\n    var proxy = process.env.HTTP_PROXY || process.env.http_proxy || null;\n    // if we're going to a secure url, try the https_proxy env variable first.\n    if (targetUrl.match(/^wss:/)) {\n      proxy = process.env.HTTPS_PROXY || process.env.https_proxy || proxy;\n    }\n    return proxy;\n  }\n\n  _launchConnection() {\n    var self = this;\n    self._cleanup(); // cleanup the old socket, if there was one.\n\n    // Since server-to-server DDP is still an experimental feature, we only\n    // require the module if we actually create a server-to-server\n    // connection.\n    var FayeWebSocket = Npm.require('faye-websocket');\n    var deflate = Npm.require('permessage-deflate');\n\n    var targetUrl = toWebsocketUrl(self.endpoint);\n    var fayeOptions = {\n      headers: self.headers,\n      extensions: [deflate]\n    };\n    fayeOptions = _.extend(fayeOptions, self.npmFayeOptions);\n    var proxyUrl = self._getProxyUrl(targetUrl);\n    if (proxyUrl) {\n      fayeOptions.proxy = { origin: proxyUrl };\n    };\n\n    // We would like to specify 'ddp' as the subprotocol here. The npm module we\n    // used to use as a client would fail the handshake if we ask for a\n    // subprotocol and the server doesn't send one back (and sockjs doesn't).\n    // Faye doesn't have that behavior; it's unclear from reading RFC 6455 if\n    // Faye is erroneous or not.  So for now, we don't specify protocols.\n    var subprotocols = [];\n\n    var client = self.client = new FayeWebSocket.Client(\n      targetUrl, subprotocols, fayeOptions);\n\n    self._clearConnectionTimer();\n    self.connectionTimer = Meteor.setTimeout(\n      function () {\n        self._lostConnection(\n          new DDP.ConnectionError(\"DDP connection timed out\"));\n      },\n      self.CONNECT_TIMEOUT);\n\n    self.client.on('open', Meteor.bindEnvironment(function () {\n      return self._onConnect(client);\n    }, \"stream connect callback\"));\n\n    var clientOnIfCurrent = function (event, description, f) {\n      self.client.on(event, Meteor.bindEnvironment(function () {\n        // Ignore events from any connection we've already cleaned up.\n        if (client !== self.client)\n          return;\n        f.apply(this, arguments);\n      }, description));\n    };\n\n    clientOnIfCurrent('error', 'stream error callback', function (error) {\n      if (!self.options._dontPrintErrors)\n        Meteor._debug(\"stream error\", error.message);\n\n      // Faye's 'error' object is not a JS error (and among other things,\n      // doesn't stringify well). Convert it to one.\n      self._lostConnection(new DDP.ConnectionError(error.message));\n    });\n\n\n    clientOnIfCurrent('close', 'stream close callback', function () {\n      self._lostConnection();\n    });\n\n\n    clientOnIfCurrent('message', 'stream message callback', function (message) {\n      // Ignore binary frames, where message.data is a Buffer\n      if (typeof message.data !== \"string\")\n        return;\n\n      _.each(self.eventCallbacks.message, function (callback) {\n        callback(message.data);\n      });\n    });\n  }\n};\n","import { DDP, LivedataTest } from \"./namespace.js\";\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\nvar endsWith = function(str, ends) {\n  return str.length >= ends.length &&\n    str.substring(str.length - ends.length) === ends;\n};\n\n// @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\nvar translateUrl =  function(url, newSchemeBase, subPath) {\n  if (! newSchemeBase) {\n    newSchemeBase = \"http\";\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host =\n          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);\n\n    // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n    host = host.replace(/\\*/g, function () {\n      return Math.floor(Random.fraction()*10);\n    });\n\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + \"://\" + urlAfterHttp;\n  }\n\n  // Prefix FQDNs but not relative URLs\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {\n    url = newSchemeBase + \"://\" + url;\n  }\n\n  // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n  url = Meteor._relativeToSiteRootUrl(url);\n\n  if (endsWith(url, \"/\"))\n    return url + subPath;\n  else\n    return url + \"/\" + subPath;\n};\n\ntoSockjsUrl = function (url) {\n  return translateUrl(url, \"http\", \"sockjs\");\n};\n\ntoWebsocketUrl = function (url) {\n  var ret = translateUrl(url, \"ws\", \"websocket\");\n  return ret;\n};\n\nLivedataTest.toSockjsUrl = toSockjsUrl;\n\n \n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // Register for callbacks.\n  on: function (name, callback) {\n    var self = this;\n\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error(\"unknown event type: \" + name);\n\n    if (!self.eventCallbacks[name])\n      self.eventCallbacks[name] = [];\n    self.eventCallbacks[name].push(callback);\n  },\n\n\n  _initCommon: function (options) {\n    var self = this;\n    options = options || {};\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    self.eventCallbacks = {}; // name -> [callback]\n\n    self._forcedToDisconnect = false;\n\n    //// Reactive status\n    self.currentStatus = {\n      status: \"connecting\",\n      connected: false,\n      retryCount: 0\n    };\n\n\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;\n    self.statusChanged = function () {\n      if (self.statusListeners)\n        self.statusListeners.changed();\n    };\n\n    //// Retry logic\n    self._retry = new Retry;\n    self.connectionTimer = null;\n\n  },\n\n  // Trigger a reconnect.\n  reconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    if (options.url) {\n      self._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      self.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (self.currentStatus.connected) {\n      if (options._force || options.url) {\n        // force reconnect.\n        self._lostConnection(new DDP.ForcedReconnectError);\n      } // else, noop.\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (self.currentStatus.status === \"connecting\") {\n      // Pretend it's a clean close.\n      self._lostConnection();\n    }\n\n    self._retry.clear();\n    self.currentStatus.retryCount -= 1; // don't count manual retries\n    self._retryNow();\n  },\n\n  disconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (self._forcedToDisconnect)\n      return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      self._forcedToDisconnect = true;\n    }\n\n    self._cleanup();\n    self._retry.clear();\n\n    self.currentStatus = {\n      status: (options._permanent ? \"failed\" : \"offline\"),\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      self.currentStatus.reason = options._error;\n\n    self.statusChanged();\n  },\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection: function (maybeError) {\n    var self = this;\n\n    self._cleanup(maybeError);\n    self._retryLater(maybeError); // sets status. no need to do it here.\n  },\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online: function () {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != \"offline\")\n      this.reconnect();\n  },\n\n  _retryLater: function (maybeError) {\n    var self = this;\n\n    var timeout = 0;\n    if (self.options.retry ||\n        (maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\")) {\n      timeout = self._retry.retryLater(\n        self.currentStatus.retryCount,\n        _.bind(self._retryNow, self)\n      );\n      self.currentStatus.status = \"waiting\";\n      self.currentStatus.retryTime = (new Date()).getTime() + timeout;\n    } else {\n      self.currentStatus.status = \"failed\";\n      delete self.currentStatus.retryTime;\n    }\n\n    self.currentStatus.connected = false;\n    self.statusChanged();\n  },\n\n  _retryNow: function () {\n    var self = this;\n\n    if (self._forcedToDisconnect)\n      return;\n\n    self.currentStatus.retryCount += 1;\n    self.currentStatus.status = \"connecting\";\n    self.currentStatus.connected = false;\n    delete self.currentStatus.retryTime;\n    self.statusChanged();\n\n    self._launchConnection();\n  },\n\n\n  // Get current status. Reactive.\n  status: function () {\n    var self = this;\n    if (self.statusListeners)\n      self.statusListeners.depend();\n    return self.currentStatus;\n  }\n});\n\nDDP.ConnectionError = Meteor.makeErrorType(\n  \"DDP.ConnectionError\", function (message) {\n    var self = this;\n    self.message = message;\n});\n\nDDP.ForcedReconnectError = Meteor.makeErrorType(\n  \"DDP.ForcedReconnectError\", function () {});\n","import { DDP, LivedataTest } from \"./namespace.js\";\n\nLivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;\n\n// This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear\n// it. We can probably find a better way to factor this.\nDDP._CurrentInvocation = new Meteor.EnvironmentVariable;\n","import { DDP } from \"./namespace.js\";\n\n// Returns the named sequence of pseudo-random values.\n// The scope will be DDP._CurrentInvocation.get(), so the stream will produce\n// consistent values for method calls on the client and server.\nDDP.randomStream = function (name) {\n  var scope = DDP._CurrentInvocation.get();\n  return DDPCommon.RandomStream.get(scope, name);\n};\n\n\n","import { DDP, LivedataTest } from \"./namespace.js\";\nimport { MongoIDMap } from \"./id_map.js\";\n\nif (Meteor.isServer) {\n  var path = Npm.require('path');\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require(path.join('fibers', 'future'));\n}\n\n// @param url {String|Object} URL to Meteor app,\n//   or an object as a test hook (see code)\n// Options:\n//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?\n//   headers: extra headers to send on the websockets connection, for\n//     server-to-server DDP only\n//   _sockjsOptions: Specifies options to pass through to the sockjs client\n//   onDDPNegotiationVersionFailure: callback when version negotiation fails.\n//\n// XXX There should be a way to destroy a DDP connection, causing all\n// outstanding method calls to fail.\n//\n// XXX Our current way of handling failure and reconnection is great\n// for an app (where we want to tolerate being disconnected as an\n// expect state, and keep trying forever to reconnect) but cumbersome\n// for something like a command line tool that wants to make a\n// connection, call a method, and print an error if connection\n// fails. We should have better usability in the latter case (while\n// still transparently reconnecting if it's just a transient failure\n// or the server migrating us).\nvar Connection = function (url, options) {\n  var self = this;\n  options = _.extend({\n    onConnected: function () {},\n    onDDPVersionNegotiationFailure: function (description) {\n      Meteor._debug(description);\n    },\n    heartbeatInterval: 17500,\n    heartbeatTimeout: 15000,\n    npmFayeOptions: {},\n    // These options are only for testing.\n    reloadWithOutstanding: false,\n    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,\n    retry: true,\n    respondToPings: true,\n    // When updates are coming within this ms interval, batch them together.\n    bufferedWritesInterval: 5,\n    // Flush buffers immediately if writes are happening continuously for more than this many ms.\n    bufferedWritesMaxAge: 500\n  }, options);\n\n  // If set, called when we reconnect, queuing method calls _before_ the\n  // existing outstanding ones. This is the only data member that is part of the\n  // public API!\n  self.onReconnect = null;\n\n  // as a test hook, allow passing a stream instead of a url.\n  if (typeof url === \"object\") {\n    self._stream = url;\n  } else {\n    self._stream = new LivedataTest.ClientStream(url, {\n      retry: options.retry,\n      headers: options.headers,\n      _sockjsOptions: options._sockjsOptions,\n      // Used to keep some tests quiet, or for other cases in which\n      // the right thing to do with connection errors is to silently\n      // fail (e.g. sending package usage stats). At some point we\n      // should have a real API for handling client-stream-level\n      // errors.\n      _dontPrintErrors: options._dontPrintErrors,\n      connectTimeoutMs: options.connectTimeoutMs,\n      npmFayeOptions: options.npmFayeOptions\n    });\n  }\n\n  self._lastSessionId = null;\n  self._versionSuggestion = null;  // The last proposed DDP version.\n  self._version = null;   // The DDP version agreed on by client and server.\n  self._stores = {}; // name -> object with methods\n  self._methodHandlers = {}; // name -> func\n  self._nextMethodId = 1;\n  self._supportedDDPVersions = options.supportedDDPVersions;\n\n  self._heartbeatInterval = options.heartbeatInterval;\n  self._heartbeatTimeout = options.heartbeatTimeout;\n\n  // Tracks methods which the user has tried to call but which have not yet\n  // called their user callback (ie, they are waiting on their result or for all\n  // of their writes to be written to the local cache). Map from method ID to\n  // MethodInvoker object.\n  self._methodInvokers = {};\n\n  // Tracks methods which the user has called but whose result messages have not\n  // arrived yet.\n  //\n  // _outstandingMethodBlocks is an array of blocks of methods. Each block\n  // represents a set of methods that can run at the same time. The first block\n  // represents the methods which are currently in flight; subsequent blocks\n  // must wait for previous blocks to be fully finished before they can be sent\n  // to the server.\n  //\n  // Each block is an object with the following fields:\n  // - methods: a list of MethodInvoker objects\n  // - wait: a boolean; if true, this block had a single method invoked with\n  //         the \"wait\" option\n  //\n  // There will never be adjacent blocks with wait=false, because the only thing\n  // that makes methods need to be serialized is a wait method.\n  //\n  // Methods are removed from the first block when their \"result\" is\n  // received. The entire first block is only removed when all of the in-flight\n  // methods have received their results (so the \"methods\" list is empty) *AND*\n  // all of the data written by those methods are visible in the local cache. So\n  // it is possible for the first block's methods list to be empty, if we are\n  // still waiting for some objects to quiesce.\n  //\n  // Example:\n  //  _outstandingMethodBlocks = [\n  //    {wait: false, methods: []},\n  //    {wait: true, methods: [<MethodInvoker for 'login'>]},\n  //    {wait: false, methods: [<MethodInvoker for 'foo'>,\n  //                            <MethodInvoker for 'bar'>]}]\n  // This means that there were some methods which were sent to the server and\n  // which have returned their results, but some of the data written by\n  // the methods may not be visible in the local cache. Once all that data is\n  // visible, we will send a 'login' method. Once the login method has returned\n  // and all the data is visible (including re-running subs if userId changes),\n  // we will send the 'foo' and 'bar' methods in parallel.\n  self._outstandingMethodBlocks = [];\n\n  // method ID -> array of objects with keys 'collection' and 'id', listing\n  // documents written by a given method's stub. keys are associated with\n  // methods whose stub wrote at least one document, and whose data-done message\n  // has not yet been received.\n  self._documentsWrittenByStub = {};\n  // collection -> IdMap of \"server document\" object. A \"server document\" has:\n  // - \"document\": the version of the document according the\n  //   server (ie, the snapshot before a stub wrote it, amended by any changes\n  //   received from the server)\n  //   It is undefined if we think the document does not exist\n  // - \"writtenByStubs\": a set of method IDs whose stubs wrote to the document\n  //   whose \"data done\" messages have not yet been processed\n  self._serverDocuments = {};\n\n  // Array of callbacks to be called after the next update of the local\n  // cache. Used for:\n  //  - Calling methodInvoker.dataVisible and sub ready callbacks after\n  //    the relevant data is flushed.\n  //  - Invoking the callbacks of \"half-finished\" methods after reconnect\n  //    quiescence. Specifically, methods whose result was received over the old\n  //    connection (so we don't re-send it) but whose data had not been made\n  //    visible.\n  self._afterUpdateCallbacks = [];\n\n  // In two contexts, we buffer all incoming data messages and then process them\n  // all at once in a single update:\n  //   - During reconnect, we buffer all data messages until all subs that had\n  //     been ready before reconnect are ready again, and all methods that are\n  //     active have returned their \"data done message\"; then\n  //   - During the execution of a \"wait\" method, we buffer all data messages\n  //     until the wait method gets its \"data done\" message. (If the wait method\n  //     occurs during reconnect, it doesn't get any special handling.)\n  // all data messages are processed in one update.\n  //\n  // The following fields are used for this \"quiescence\" process.\n\n  // This buffers the messages that aren't being processed yet.\n  self._messagesBufferedUntilQuiescence = [];\n  // Map from method ID -> true. Methods are removed from this when their\n  // \"data done\" message is received, and we will not quiesce until it is\n  // empty.\n  self._methodsBlockingQuiescence = {};\n  // map from sub ID -> true for subs that were ready (ie, called the sub\n  // ready callback) before reconnect but haven't become ready again yet\n  self._subsBeingRevived = {}; // map from sub._id -> true\n  // if true, the next data update should reset all stores. (set during\n  // reconnect.)\n  self._resetStores = false;\n\n  // name -> array of updates for (yet to be created) collections\n  self._updatesForUnknownStores = {};\n  // if we're blocking a migration, the retry func\n  self._retryMigrate = null;\n\n  self.__flushBufferedWrites = Meteor.bindEnvironment(\n    self._flushBufferedWrites, \"flushing DDP buffered writes\", self);\n  // Collection name -> array of messages.\n  self._bufferedWrites = {};\n  // When current buffer of updates must be flushed at, in ms timestamp.\n  self._bufferedWritesFlushAt = null;\n  // Timeout handle for the next processing of all pending writes\n  self._bufferedWritesFlushHandle = null;\n\n  self._bufferedWritesInterval = options.bufferedWritesInterval;\n  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge;\n\n  // metadata for subscriptions.  Map from sub ID to object with keys:\n  //   - id\n  //   - name\n  //   - params\n  //   - inactive (if true, will be cleaned up if not reused in re-run)\n  //   - ready (has the 'ready' message been received?)\n  //   - readyCallback (an optional callback to call when ready)\n  //   - errorCallback (an optional callback to call if the sub terminates with\n  //                    an error, XXX COMPAT WITH 1.0.3.1)\n  //   - stopCallback (an optional callback to call when the sub terminates\n  //     for any reason, with an error argument if an error triggered the stop)\n  self._subscriptions = {};\n\n  // Reactive userId.\n  self._userId = null;\n  self._userIdDeps = new Tracker.Dependency;\n\n  // Block auto-reload while we're waiting for method responses.\n  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {\n    Package.reload.Reload._onMigrate(function (retry) {\n      if (!self._readyToMigrate()) {\n        if (self._retryMigrate)\n          throw new Error(\"Two migrations in progress?\");\n        self._retryMigrate = retry;\n        return false;\n      } else {\n        return [true];\n      }\n    });\n  }\n\n  var onMessage = function (raw_msg) {\n    try {\n      var msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug(\"Exception while parsing DDP\", e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (self._heartbeat) {\n      self._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back\n      // compat.  Remove this 'if' once the server stops sending welcome\n      // messages (stream_server.js).\n      if (! (msg && msg.server_id))\n        Meteor._debug(\"discarding invalid livedata message\", msg);\n      return;\n    }\n\n    if (msg.msg === 'connected') {\n      self._version = self._versionSuggestion;\n      self._livedata_connected(msg);\n      options.onConnected();\n    }\n    else if (msg.msg === 'failed') {\n      if (_.contains(self._supportedDDPVersions, msg.version)) {\n        self._versionSuggestion = msg.version;\n        self._stream.reconnect({_force: true});\n      } else {\n        var description =\n              \"DDP version negotiation failed; server requested version \" + msg.version;\n        self._stream.disconnect({_permanent: true, _error: description});\n        options.onDDPVersionNegotiationFailure(description);\n      }\n    }\n    else if (msg.msg === 'ping' && options.respondToPings) {\n      self._send({msg: \"pong\", id: msg.id});\n    }\n    else if (msg.msg === 'pong') {\n      // noop, as we assume everything's a pong\n    }\n    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))\n      self._livedata_data(msg);\n    else if (msg.msg === 'nosub')\n      self._livedata_nosub(msg);\n    else if (msg.msg === 'result')\n      self._livedata_result(msg);\n    else if (msg.msg === 'error')\n      self._livedata_error(msg);\n    else\n      Meteor._debug(\"discarding unknown livedata message type\", msg);\n  };\n\n  var onReset = function () {\n    // Send a connect message at the beginning of the stream.\n    // NOTE: reset is called even on the first connection, so this is\n    // the only place we send this message.\n    var msg = {msg: 'connect'};\n    if (self._lastSessionId)\n      msg.session = self._lastSessionId;\n    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];\n    self._versionSuggestion = msg.version;\n    msg.support = self._supportedDDPVersions;\n    self._send(msg);\n\n    // Mark non-retry calls as failed. This has to be done early as getting these methods out of the\n    // current block is pretty important to making sure that quiescence is properly calculated, as\n    // well as possibly moving on to another useful block.\n\n    // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if\n    // we are connecting for the first time.\n    if (self._outstandingMethodBlocks.length > 0) {\n      // If there is an outstanding method block, we only care about the first one as that is the\n      // one that could have already sent messages with no response, that are not allowed to retry.\n      const currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n      self._outstandingMethodBlocks[0].methods = currentMethodBlock.filter((methodInvoker) => {\n\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          // Make sure that the method is told that it failed.\n          methodInvoker.receiveResult(new Meteor.Error('invocation-failed',\n            'Method invocation might have failed due to dropped connection. ' +\n            'Failing because `noRetry` option was passed to Meteor.apply.'));\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        // This may leave the block empty, but we don't move on to the next\n        // block until the callback has been delivered, in _outstandingMethodFinished.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      });\n    }\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected. (1)\n    // They're supposed to be idempotent, and where they are not,\n    // they can block retry in apply; (2) even if we did reconnect,\n    // we're not sure what messages might have gotten lost\n    // (in either direction) since we were disconnected (TCP being\n    // sloppy about that.)\n\n    // If the current block of methods all got their results (but didn't all get\n    // their data visible), discard the empty block now.\n    if (! _.isEmpty(self._outstandingMethodBlocks) &&\n        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {\n      self._outstandingMethodBlocks.shift();\n    }\n\n    // Mark all messages as unsent, they have not yet been sent on this\n    // connection.\n    _.each(self._methodInvokers, function (m) {\n      m.sentMessage = false;\n    });\n\n    // If an `onReconnect` handler is set, call it first. Go through\n    // some hoops to ensure that methods that are called from within\n    // `onReconnect` get executed _before_ ones that were originally\n    // outstanding (since `onReconnect` is used to re-establish auth\n    // certificates)\n    if (self.onReconnect)\n      self._callOnReconnectAndSendAppropriateOutstandingMethods();\n    else\n      self._sendOutstandingMethods();\n\n    // add new subscriptions at the end. this way they take effect after\n    // the handlers and we don't see flicker.\n    _.each(self._subscriptions, function (sub, id) {\n      self._send({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  };\n\n  var onDisconnect = function () {\n    if (self._heartbeat) {\n      self._heartbeat.stop();\n      self._heartbeat = null;\n    }\n  };\n\n  if (Meteor.isServer) {\n    self._stream.on('message', Meteor.bindEnvironment(onMessage, \"handling DDP message\"));\n    self._stream.on('reset', Meteor.bindEnvironment(onReset, \"handling DDP reset\"));\n    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, \"handling DDP disconnect\"));\n  } else {\n    self._stream.on('message', onMessage);\n    self._stream.on('reset', onReset);\n    self._stream.on('disconnect', onDisconnect);\n  }\n};\n\n// A MethodInvoker manages sending a method to the server and calling the user's\n// callbacks. On construction, it registers itself in the connection's\n// _methodInvokers map; it removes itself once the method is fully finished and\n// the callback is invoked. This occurs when it has both received a result,\n// and the data written by it is fully visible.\nvar MethodInvoker = function (options) {\n  var self = this;\n\n  // Public (within this file) fields.\n  self.methodId = options.methodId;\n  self.sentMessage = false;\n\n  self._callback = options.callback;\n  self._connection = options.connection;\n  self._message = options.message;\n  self._onResultReceived = options.onResultReceived || function () {};\n  self._wait = options.wait;\n  self.noRetry = options.noRetry;\n  self._methodResult = null;\n  self._dataVisible = false;\n\n  // Register with the connection.\n  self._connection._methodInvokers[self.methodId] = self;\n};\n_.extend(MethodInvoker.prototype, {\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  sendMessage: function () {\n    var self = this;\n    // This function is called before sending a method (including resending on\n    // reconnect). We should only (re)send methods where we don't already have a\n    // result!\n    if (self.gotResult())\n      throw new Error(\"sendingMethod is called on method with result\");\n\n\n    // If we're re-sending it, it doesn't matter if data was written the first\n    // time.\n    self._dataVisible = false;\n    self.sentMessage = true;\n\n    // If this is a wait method, make all data messages be buffered until it is\n    // done.\n    if (self._wait)\n      self._connection._methodsBlockingQuiescence[self.methodId] = true;\n\n    // Actually send the message.\n    self._connection._send(self._message);\n  },\n  // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  _maybeInvokeCallback: function () {\n    var self = this;\n    if (self._methodResult && self._dataVisible) {\n      // Call the callback. (This won't throw: the callback was wrapped with\n      // bindEnvironment.)\n      self._callback(self._methodResult[0], self._methodResult[1]);\n\n      // Forget about this method.\n      delete self._connection._methodInvokers[self.methodId];\n\n      // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.\n      self._connection._outstandingMethodFinished();\n    }\n  },\n  // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  receiveResult: function (err, result) {\n    var self = this;\n    if (self.gotResult())\n      throw new Error(\"Methods should only receive results once\");\n    self._methodResult = [err, result];\n    self._onResultReceived(err, result);\n    self._maybeInvokeCallback();\n  },\n  // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  dataVisible: function () {\n    var self = this;\n    self._dataVisible = true;\n    self._maybeInvokeCallback();\n  },\n  // True if receiveResult has been called.\n  gotResult: function () {\n    var self = this;\n    return !!self._methodResult;\n  }\n});\n\n_.extend(Connection.prototype, {\n  // 'name' is the name of the data on the wire that should go in the\n  // store. 'wrappedStore' should be an object with methods beginUpdate, update,\n  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.\n  registerStore: function (name, wrappedStore) {\n    var self = this;\n\n    if (name in self._stores)\n      return false;\n\n    // Wrap the input object in an object which makes any store method not\n    // implemented by 'store' into a no-op.\n    var store = {};\n    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',\n            'retrieveOriginals', 'getDoc',\n\t\t\t'_getCollection'], function (method) {\n              store[method] = function () {\n                return (wrappedStore[method]\n                        ? wrappedStore[method].apply(wrappedStore, arguments)\n                        : undefined);\n              };\n            });\n\n    self._stores[name] = store;\n\n    var queued = self._updatesForUnknownStores[name];\n    if (queued) {\n      store.beginUpdate(queued.length, false);\n      _.each(queued, function (msg) {\n        store.update(msg);\n      });\n      store.endUpdate();\n      delete self._updatesForUnknownStores[name];\n    }\n\n    return true;\n  },\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Subscribe to a record set.  Returns a handle that provides\n   * `stop()` and `ready()` methods.\n   * @locus Client\n   * @param {String} name Name of the subscription.  Matches the name of the\n   * server's `publish()` call.\n   * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher\n   * function on server.\n   * @param {Function|Object} [callbacks] Optional. May include `onStop`\n   * and `onReady` callbacks. If there is an error, it is passed as an\n   * argument to `onStop`. If a function is passed instead of an object, it\n   * is interpreted as an `onReady` callback.\n   */\n  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {\n    var self = this;\n\n    var params = Array.prototype.slice.call(arguments, 1);\n    var callbacks = {};\n    if (params.length) {\n      var lastParam = params[params.length - 1];\n      if (_.isFunction(lastParam)) {\n        callbacks.onReady = params.pop();\n      } else if (lastParam &&\n        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n        // onStop with an error callback instead.\n        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],\n          _.isFunction)) {\n        callbacks = params.pop();\n      }\n    }\n\n    // Is there an existing sub with the same name and param, run in an\n    // invalidated Computation? This will happen if we are rerunning an\n    // existing computation.\n    //\n    // For example, consider a rerun of:\n    //\n    //     Tracker.autorun(function () {\n    //       Meteor.subscribe(\"foo\", Session.get(\"foo\"));\n    //       Meteor.subscribe(\"bar\", Session.get(\"bar\"));\n    //     });\n    //\n    // If \"foo\" has changed but \"bar\" has not, we will match the \"bar\"\n    // subcribe to an existing inactive subscription in order to not\n    // unsub and resub the subscription unnecessarily.\n    //\n    // We only look for one such sub; if there are N apparently-identical subs\n    // being invalidated, we will require N matching subscribe calls to keep\n    // them all active.\n    var existing = _.find(self._subscriptions, function (sub) {\n      return sub.inactive && sub.name === name &&\n        EJSON.equals(sub.params, params);\n    });\n\n    var id;\n    if (existing) {\n      id = existing.id;\n      existing.inactive = false; // reactivate\n\n      if (callbacks.onReady) {\n        // If the sub is not already ready, replace any ready callback with the\n        // one provided now. (It's not really clear what users would expect for\n        // an onReady callback inside an autorun; the semantics we provide is\n        // that at the time the sub first becomes ready, we call the last\n        // onReady callback provided, if any.)\n        if (!existing.ready)\n          existing.readyCallback = callbacks.onReady;\n      }\n\n      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call\n      // onStop with an optional error argument\n      if (callbacks.onError) {\n        // Replace existing callback if any, so that errors aren't\n        // double-reported.\n        existing.errorCallback = callbacks.onError;\n      }\n\n      if (callbacks.onStop) {\n        existing.stopCallback = callbacks.onStop;\n      }\n    } else {\n      // New sub! Generate an id, save it locally, and send message.\n      id = Random.id();\n      self._subscriptions[id] = {\n        id: id,\n        name: name,\n        params: EJSON.clone(params),\n        inactive: false,\n        ready: false,\n        readyDeps: new Tracker.Dependency,\n        readyCallback: callbacks.onReady,\n        // XXX COMPAT WITH 1.0.3.1 #errorCallback\n        errorCallback: callbacks.onError,\n        stopCallback: callbacks.onStop,\n        connection: self,\n        remove: function() {\n          delete this.connection._subscriptions[this.id];\n          this.ready && this.readyDeps.changed();\n        },\n        stop: function() {\n          this.connection._send({msg: 'unsub', id: id});\n          this.remove();\n\n          if (callbacks.onStop) {\n            callbacks.onStop();\n          }\n        }\n      };\n      self._send({msg: 'sub', id: id, name: name, params: params});\n    }\n\n    // return a handle to the application.\n    var handle = {\n      stop: function () {\n        if (!_.has(self._subscriptions, id))\n          return;\n\n        self._subscriptions[id].stop();\n      },\n      ready: function () {\n        // return false if we've unsubscribed.\n        if (!_.has(self._subscriptions, id))\n          return false;\n        var record = self._subscriptions[id];\n        record.readyDeps.depend();\n        return record.ready;\n      },\n      subscriptionId: id\n    };\n\n    if (Tracker.active) {\n      // We're in a reactive computation, so we'd like to unsubscribe when the\n      // computation is invalidated... but not if the rerun just re-subscribes\n      // to the same subscription!  When a rerun happens, we use onInvalidate\n      // as a change to mark the subscription \"inactive\" so that it can\n      // be reused from the rerun.  If it isn't reused, it's killed from\n      // an afterFlush.\n      Tracker.onInvalidate(function (c) {\n        if (_.has(self._subscriptions, id))\n          self._subscriptions[id].inactive = true;\n\n        Tracker.afterFlush(function () {\n          if (_.has(self._subscriptions, id) &&\n              self._subscriptions[id].inactive)\n            handle.stop();\n        });\n      });\n    }\n\n    return handle;\n  },\n\n  // options:\n  // - onLateError {Function(error)} called if an error was received after the ready event.\n  //     (errors received before ready cause an error to be thrown)\n  _subscribeAndWait: function (name, args, options) {\n    var self = this;\n    var f = new Future();\n    var ready = false;\n    var handle;\n    args = args || [];\n    args.push({\n      onReady: function () {\n        ready = true;\n        f['return']();\n      },\n      onError: function (e) {\n        if (!ready)\n          f['throw'](e);\n        else\n          options && options.onLateError && options.onLateError(e);\n      }\n    });\n\n    handle = self.subscribe.apply(self, [name].concat(args));\n    f.wait();\n    return handle;\n  },\n\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self._methodHandlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self._methodHandlers[name] = func;\n    });\n  },\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Invokes a method passing any number of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable} [arg1,arg2...] Optional method arguments\n   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).\n   */\n  call: function (name /* .. [arguments] .. callback */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\")\n      var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  //   wait: Boolean - Should we wait to call this until all current methods\n  //                   are fully finished, and block subsequent method calls\n  //                   until this method is fully finished?\n  //                   (does not affect methods called from within this method)\n  //   onResultReceived: Function - a callback to call as soon as the method\n  //                                result is received. the data written by\n  //                                the method may not yet be in the cache!\n  //   returnStubValue: Boolean - If true then in cases where we would have\n  //                              otherwise discarded the stub's return value\n  //                              and returned undefined, instead we go ahead\n  //                              and return it.  Specifically, this is any\n  //                              time other than when (a) we are already\n  //                              inside a stub or (b) we are in Node and no\n  //                              callback was provided.  Currently we require\n  //                              this flag to be explicitly passed to reduce\n  //                              the likelihood that stub return values will\n  //                              be confused with server return values; we\n  //                              may improve this in future.\n  // @param callback {Optional Function}\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Invoke a method passing an array of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable[]} args Method arguments\n   * @param {Object} [options]\n   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.\n   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.\n   * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.\n   * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.\n   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).\n   */\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback) {\n      // XXX would it be better form to do the binding in stream.on,\n      // or caller, instead of here?\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(\n        callback,\n        \"delivering result of invoking '\" + name + \"'\"\n      );\n    }\n\n    // Keep our args safe from mutation (eg if we don't send the message for a\n    // while because of a wait method).\n    args = EJSON.clone(args);\n\n    // Lazily allocate method ID once we know that it'll be needed.\n    var methodId = (function () {\n      var id;\n      return function () {\n        if (id === undefined)\n          id = '' + (self._nextMethodId++);\n        return id;\n      };\n    })();\n\n    var enclosing = DDP._CurrentInvocation.get();\n    var alreadyInSimulation = enclosing && enclosing.isSimulation;\n\n    // Lazily generate a randomSeed, only if it is requested by the stub.\n    // The random streams only have utility if they're used on both the client\n    // and the server; if the client doesn't generate any 'random' values\n    // then we don't expect the server to generate any either.\n    // Less commonly, the server may perform different actions from the client,\n    // and may in fact generate values where the client did not, but we don't\n    // have any client-side values to match, so even here we may as well just\n    // use a random seed on the server.  In that case, we don't pass the\n    // randomSeed to save bandwidth, and we don't even generate it to save a\n    // bit of CPU and to avoid consuming entropy.\n    var randomSeed = null;\n    var randomSeedGenerator = function () {\n      if (randomSeed === null) {\n        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);\n      }\n      return randomSeed;\n    };\n\n    // Run the stub, if we have one. The stub is supposed to make some\n    // temporary writes to the database to give the user a smooth experience\n    // until the actual result of executing the method comes back from the\n    // server (whereupon the temporary writes to the database will be reversed\n    // during the beginUpdate/endUpdate process.)\n    //\n    // Normally, we ignore the return value of the stub (even if it is an\n    // exception), in favor of the real return value from the server. The\n    // exception is if the *caller* is a stub. In that case, we're not going\n    // to do a RPC, so we use the return value of the stub as our return\n    // value.\n\n    var stub = self._methodHandlers[name];\n    if (stub) {\n      var setUserId = function(userId) {\n        self.setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: true,\n        userId: self.userId(),\n        setUserId: setUserId,\n        randomSeed: function () { return randomSeedGenerator(); }\n      });\n\n      if (!alreadyInSimulation)\n        self._saveOriginals();\n\n      try {\n        // Note that unlike in the corresponding server code, we never audit\n        // that stubs check() their arguments.\n        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {\n          if (Meteor.isServer) {\n            // Because saveOriginals and retrieveOriginals aren't reentrant,\n            // don't allow stubs to yield.\n            return Meteor._noYieldsAllowed(function () {\n              // re-clone, so that the stub can't affect our caller's values\n              return stub.apply(invocation, EJSON.clone(args));\n            });\n          } else {\n            return stub.apply(invocation, EJSON.clone(args));\n          }\n        });\n      }\n      catch (e) {\n        var exception = e;\n      }\n\n      if (!alreadyInSimulation)\n        self._retrieveAndStoreOriginals(methodId());\n    }\n\n    // If we're in a simulation, stop and return the result we have,\n    // rather than going on to do an RPC. If there was no stub,\n    // we'll end up returning undefined.\n    if (alreadyInSimulation) {\n      if (callback) {\n        callback(exception, stubReturnValue);\n        return undefined;\n      }\n      if (exception)\n        throw exception;\n      return stubReturnValue;\n    }\n\n    // If an exception occurred in a stub, and we're ignoring it\n    // because we're doing an RPC and want to use what the server\n    // returns instead, log it so the developer knows\n    // (unless they explicitly ask to see the error).\n    //\n    // Tests can set the 'expected' flag on an exception so it won't\n    // go to log.\n    if (exception) {\n      if (options.throwStubExceptions) {\n        throw exception;\n      } else if (!exception.expected) {\n        Meteor._debug(\"Exception while simulating the effect of invoking '\" +\n          name + \"'\", exception, exception.stack);\n      }\n    }\n\n\n    // At this point we're definitely doing an RPC, and we're going to\n    // return the value of the RPC to the caller.\n\n    // If the caller didn't give a callback, decide what to do.\n    if (!callback) {\n      if (Meteor.isClient) {\n        // On the client, we don't have fibers, so we can't block. The\n        // only thing we can do is to return undefined and discard the\n        // result of the RPC. If an error occurred then print the error\n        // to the console.\n        callback = function (err) {\n          err && Meteor._debug(\"Error invoking Method '\" + name + \"':\",\n                               err.message);\n        };\n      } else {\n        // On the server, make the function synchronous. Throw on\n        // errors, return on success.\n        var future = new Future;\n        callback = future.resolver();\n      }\n    }\n    // Send the RPC. Note that on the client, it is important that the\n    // stub have finished before we send the RPC, so that we know we have\n    // a complete list of which local documents the stub wrote.\n    var message = {\n      msg: 'method',\n      method: name,\n      params: args,\n      id: methodId()\n    };\n\n    // Send the randomSeed only if we used it\n    if (randomSeed !== null) {\n      message.randomSeed = randomSeed;\n    }\n\n    var methodInvoker = new MethodInvoker({\n      methodId: methodId(),\n      callback: callback,\n      connection: self,\n      onResultReceived: options.onResultReceived,\n      wait: !!options.wait,\n      message: message,\n      noRetry: !!options.noRetry\n    });\n\n    if (options.wait) {\n      // It's a wait method! Wait methods go in their own block.\n      self._outstandingMethodBlocks.push(\n        {wait: true, methods: [methodInvoker]});\n    } else {\n      // Not a wait method. Start a new block if the previous block was a wait\n      // block, and add it to the last block of methods.\n      if (_.isEmpty(self._outstandingMethodBlocks) ||\n          _.last(self._outstandingMethodBlocks).wait)\n        self._outstandingMethodBlocks.push({wait: false, methods: []});\n      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);\n    }\n\n    // If we added it to the first block, send it out now.\n    if (self._outstandingMethodBlocks.length === 1)\n      methodInvoker.sendMessage();\n\n    // If we're using the default callback on the server,\n    // block waiting for the result.\n    if (future) {\n      return future.wait();\n    }\n    return options.returnStubValue ? stubReturnValue : undefined;\n  },\n\n  // Before calling a method stub, prepare all stores to track changes and allow\n  // _retrieveAndStoreOriginals to get the original versions of changed\n  // documents.\n  _saveOriginals: function () {\n    var self = this;\n    if (!self._waitingForQuiescence())\n      self._flushBufferedWrites();\n    _.each(self._stores, function (s) {\n      s.saveOriginals();\n    });\n  },\n  // Retrieves the original versions of all documents modified by the stub for\n  // method 'methodId' from all stores and saves them to _serverDocuments (keyed\n  // by document) and _documentsWrittenByStub (keyed by method ID).\n  _retrieveAndStoreOriginals: function (methodId) {\n    var self = this;\n    if (self._documentsWrittenByStub[methodId])\n      throw new Error(\"Duplicate methodId in _retrieveAndStoreOriginals\");\n\n    var docsWritten = [];\n    _.each(self._stores, function (s, collection) {\n      var originals = s.retrieveOriginals();\n      // not all stores define retrieveOriginals\n      if (!originals)\n        return;\n      originals.forEach(function (doc, id) {\n        docsWritten.push({collection: collection, id: id});\n        if (!_.has(self._serverDocuments, collection))\n          self._serverDocuments[collection] = new MongoIDMap;\n        var serverDoc = self._serverDocuments[collection].setDefault(id, {});\n        if (serverDoc.writtenByStubs) {\n          // We're not the first stub to write this doc. Just add our method ID\n          // to the record.\n          serverDoc.writtenByStubs[methodId] = true;\n        } else {\n          // First stub! Save the original value and our method ID.\n          serverDoc.document = doc;\n          serverDoc.flushCallbacks = [];\n          serverDoc.writtenByStubs = {};\n          serverDoc.writtenByStubs[methodId] = true;\n        }\n      });\n    });\n    if (!_.isEmpty(docsWritten)) {\n      self._documentsWrittenByStub[methodId] = docsWritten;\n    }\n  },\n\n  // This is very much a private function we use to make the tests\n  // take up fewer server resources after they complete.\n  _unsubscribeAll: function () {\n    var self = this;\n    _.each(_.clone(self._subscriptions), function (sub, id) {\n      // Avoid killing the autoupdate subscription so that developers\n      // still get hot code pushes when writing tests.\n      //\n      // XXX it's a hack to encode knowledge about autoupdate here,\n      // but it doesn't seem worth it yet to have a special API for\n      // subscriptions to preserve after unit tests.\n      if (sub.name !== 'meteor_autoupdate_clientVersions') {\n        self._subscriptions[id].stop();\n      }\n    });\n  },\n\n  // Sends the DDP stringification of the given message object\n  _send: function (obj) {\n    var self = this;\n    self._stream.send(DDPCommon.stringifyDDP(obj));\n  },\n\n  // We detected via DDP-level heartbeats that we've lost the\n  // connection.  Unlike `disconnect` or `close`, a lost connection\n  // will be automatically retried.\n  _lostConnection: function (error) {\n    var self = this;\n    self._stream._lostConnection(error);\n  },\n\n  /**\n   * @summary Get the current connection status. A reactive data source.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  status: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.status.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Force an immediate reconnection attempt if the client is not connected to the server.\n\n  This method does nothing if the client is already connected.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  reconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.reconnect.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Disconnect the client from the server.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  disconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.disconnect.apply(self._stream, arguments);\n  },\n\n  close: function () {\n    var self = this;\n    return self._stream.disconnect({_permanent: true});\n  },\n\n  ///\n  /// Reactive user system\n  ///\n  userId: function () {\n    var self = this;\n    if (self._userIdDeps)\n      self._userIdDeps.depend();\n    return self._userId;\n  },\n\n  setUserId: function (userId) {\n    var self = this;\n    // Avoid invalidating dependents if setUserId is called with current value.\n    if (self._userId === userId)\n      return;\n    self._userId = userId;\n    if (self._userIdDeps)\n      self._userIdDeps.changed();\n  },\n\n  // Returns true if we are in a state after reconnect of waiting for subs to be\n  // revived or early methods to finish their data, or we are waiting for a\n  // \"wait\" method to finish.\n  _waitingForQuiescence: function () {\n    var self = this;\n    return (! _.isEmpty(self._subsBeingRevived) ||\n            ! _.isEmpty(self._methodsBlockingQuiescence));\n  },\n\n  // Returns true if any method whose message has been sent to the server has\n  // not yet invoked its user callback.\n  _anyMethodsAreOutstanding: function () {\n    var self = this;\n    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));\n  },\n\n  _livedata_connected: function (msg) {\n    var self = this;\n\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {\n      self._heartbeat = new DDPCommon.Heartbeat({\n        heartbeatInterval: self._heartbeatInterval,\n        heartbeatTimeout: self._heartbeatTimeout,\n        onTimeout: function () {\n          self._lostConnection(\n            new DDP.ConnectionError(\"DDP heartbeat timed out\"));\n        },\n        sendPing: function () {\n          self._send({msg: 'ping'});\n        }\n      });\n      self._heartbeat.start();\n    }\n\n    // If this is a reconnect, we'll have to reset all stores.\n    if (self._lastSessionId)\n      self._resetStores = true;\n\n    if (typeof (msg.session) === \"string\") {\n      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);\n      self._lastSessionId = msg.session;\n    }\n\n    if (reconnectedToPreviousSession) {\n      // Successful reconnection -- pick up where we left off.  Note that right\n      // now, this never happens: the server never connects us to a previous\n      // session, because DDP doesn't provide enough data for the server to know\n      // what messages the client has processed. We need to improve DDP to make\n      // this possible, at which point we'll probably need more code here.\n      return;\n    }\n\n    // Server doesn't have our data any more. Re-sync a new session.\n\n    // Forget about messages we were buffering for unknown collections. They'll\n    // be resent if still relevant.\n    self._updatesForUnknownStores = {};\n\n    if (self._resetStores) {\n      // Forget about the effects of stubs. We'll be resetting all collections\n      // anyway.\n      self._documentsWrittenByStub = {};\n      self._serverDocuments = {};\n    }\n\n    // Clear _afterUpdateCallbacks.\n    self._afterUpdateCallbacks = [];\n\n    // Mark all named subscriptions which are ready (ie, we already called the\n    // ready callback) as needing to be revived.\n    // XXX We should also block reconnect quiescence until unnamed subscriptions\n    //     (eg, autopublish) are done re-publishing to avoid flicker!\n    self._subsBeingRevived = {};\n    _.each(self._subscriptions, function (sub, id) {\n      if (sub.ready)\n        self._subsBeingRevived[id] = true;\n    });\n\n    // Arrange for \"half-finished\" methods to have their callbacks run, and\n    // track methods that were sent on this connection so that we don't\n    // quiesce until they are all done.\n    //\n    // Start by clearing _methodsBlockingQuiescence: methods sent before\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection\n    // that we drop here will be restored by the loop below.\n    self._methodsBlockingQuiescence = {};\n    if (self._resetStores) {\n      _.each(self._methodInvokers, function (invoker) {\n        if (invoker.gotResult()) {\n          // This method already got its result, but it didn't call its callback\n          // because its data didn't become visible. We did not resend the\n          // method RPC. We'll call its callback when we get a full quiesce,\n          // since that's as close as we'll get to \"data must be visible\".\n          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));\n        } else if (invoker.sentMessage) {\n          // This method has been sent on this connection (maybe as a resend\n          // from the last connection, maybe from onReconnect, maybe just very\n          // quickly before processing the connected message).\n          //\n          // We don't need to do anything special to ensure its callbacks get\n          // called, but we'll count it as a method which is preventing\n          // reconnect quiescence. (eg, it might be a login method that was run\n          // from onReconnect, and we don't want to see flicker by seeing a\n          // logged-out state.)\n          self._methodsBlockingQuiescence[invoker.methodId] = true;\n        }\n      });\n    }\n\n    self._messagesBufferedUntilQuiescence = [];\n\n    // If we're not waiting on any methods or subs, we can reset the stores and\n    // call the callbacks immediately.\n    if (!self._waitingForQuiescence()) {\n      if (self._resetStores) {\n        _.each(self._stores, function (s) {\n          s.beginUpdate(0, true);\n          s.endUpdate();\n        });\n        self._resetStores = false;\n      }\n      self._runAfterUpdateCallbacks();\n    }\n  },\n\n\n  _processOneDataMessage: function (msg, updates) {\n    var self = this;\n    // Using underscore here so as not to need to capitalize.\n    self['_process_' + msg.msg](msg, updates);\n  },\n\n\n  _livedata_data: function (msg) {\n    var self = this;\n\n    if (self._waitingForQuiescence()) {\n      self._messagesBufferedUntilQuiescence.push(msg);\n\n      if (msg.msg === \"nosub\")\n        delete self._subsBeingRevived[msg.id];\n\n      _.each(msg.subs || [], function (subId) {\n        delete self._subsBeingRevived[subId];\n      });\n      _.each(msg.methods || [], function (methodId) {\n        delete self._methodsBlockingQuiescence[methodId];\n      });\n\n      if (self._waitingForQuiescence())\n        return;\n\n      // No methods or subs are blocking quiescence!\n      // We'll now process and all of our buffered messages, reset all stores,\n      // and apply them all at once.\n      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {\n        self._processOneDataMessage(bufferedMsg, self._bufferedWrites);\n      });\n      self._messagesBufferedUntilQuiescence = [];\n    } else {\n      self._processOneDataMessage(msg, self._bufferedWrites);\n    }\n\n    // Immediately flush writes when:\n    //  1. Buffering is disabled. Or;\n    //  2. any non-(added/changed/removed) message arrives.\n    var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg);\n    if (self._bufferedWritesInterval === 0 || !standardWrite) {\n      self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushAt === null) {\n      self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;\n    }\n    else if (self._bufferedWritesFlushAt < new Date().valueOf()) {\n      self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushHandle) {\n      clearTimeout(self._bufferedWritesFlushHandle);\n    }\n    self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites,\n                                                      self._bufferedWritesInterval);\n  },\n\n  _flushBufferedWrites: function () {\n    var self = this;\n    if (self._bufferedWritesFlushHandle) {\n      clearTimeout(self._bufferedWritesFlushHandle);\n      self._bufferedWritesFlushHandle = null;\n    }\n\n    self._bufferedWritesFlushAt = null;\n    // We need to clear the buffer before passing it to\n    //  performWrites. As there's no guarantee that it\n    //  will exit cleanly.\n    var writes = self._bufferedWrites;\n    self._bufferedWrites = {};\n    self._performWrites(writes);\n  },\n\n  _performWrites: function(updates){\n    var self = this;\n\n    if (self._resetStores || !_.isEmpty(updates)) {\n      // Begin a transactional update of each store.\n      _.each(self._stores, function (s, storeName) {\n        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,\n                      self._resetStores);\n      });\n      self._resetStores = false;\n\n      _.each(updates, function (updateMessages, storeName) {\n        var store = self._stores[storeName];\n        if (store) {\n          _.each(updateMessages, function (updateMessage) {\n            store.update(updateMessage);\n          });\n        } else {\n          // Nobody's listening for this data. Queue it up until\n          // someone wants it.\n          // XXX memory use will grow without bound if you forget to\n          // create a collection or just don't care about it... going\n          // to have to do something about that.\n          if (!_.has(self._updatesForUnknownStores, storeName))\n            self._updatesForUnknownStores[storeName] = [];\n          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],\n                                     updateMessages);\n        }\n      });\n\n      // End update transaction.\n      _.each(self._stores, function (s) { s.endUpdate(); });\n    }\n\n    self._runAfterUpdateCallbacks();\n  },\n\n  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose\n  // relevant docs have been flushed, as well as dataVisible callbacks at\n  // reconnect-quiescence time.\n  _runAfterUpdateCallbacks: function () {\n    var self = this;\n    var callbacks = self._afterUpdateCallbacks;\n    self._afterUpdateCallbacks = [];\n    _.each(callbacks, function (c) {\n      c();\n    });\n  },\n\n  _pushUpdate: function (updates, collection, msg) {\n    var self = this;\n    if (!_.has(updates, collection)) {\n      updates[collection] = [];\n    }\n    updates[collection].push(msg);\n  },\n\n  _getServerDoc: function (collection, id) {\n    var self = this;\n    if (!_.has(self._serverDocuments, collection))\n      return null;\n    var serverDocsForCollection = self._serverDocuments[collection];\n    return serverDocsForCollection.get(id) || null;\n  },\n\n  _process_added: function (msg, updates) {\n    var self = this;\n    var id = MongoID.idParse(msg.id);\n    var serverDoc = self._getServerDoc(msg.collection, id);\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      var isExisting = (serverDoc.document !== undefined);\n\n      serverDoc.document = msg.fields || {};\n      serverDoc.document._id = id;\n\n      if (self._resetStores) {\n        // During reconnect the server is sending adds for existing ids.\n        // Always push an update so that document stays in the store after\n        // reset. Use current version of the document for this update, so\n        // that stub-written values are preserved.\n        var currentDoc = self._stores[msg.collection].getDoc(msg.id);\n        if (currentDoc !== undefined)\n          msg.fields = currentDoc;\n\n        self._pushUpdate(updates, msg.collection, msg);\n      } else if (isExisting) {\n        throw new Error(\"Server sent add for existing id: \" + msg.id);\n      }\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_changed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent changed for nonexisting id: \" + msg.id);\n      DiffSequence.applyChanges(serverDoc.document, msg.fields);\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_removed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent removed for nonexisting id:\" + msg.id);\n      serverDoc.document = undefined;\n    } else {\n      self._pushUpdate(updates, msg.collection, {\n        msg: 'removed',\n        collection: msg.collection,\n        id: msg.id\n      });\n    }\n  },\n\n  _process_updated: function (msg, updates) {\n    var self = this;\n    // Process \"method done\" messages.\n    _.each(msg.methods, function (methodId) {\n      _.each(self._documentsWrittenByStub[methodId], function (written) {\n        var serverDoc = self._getServerDoc(written.collection, written.id);\n        if (!serverDoc)\n          throw new Error(\"Lost serverDoc for \" + JSON.stringify(written));\n        if (!serverDoc.writtenByStubs[methodId])\n          throw new Error(\"Doc \" + JSON.stringify(written) +\n                          \" not written by  method \" + methodId);\n        delete serverDoc.writtenByStubs[methodId];\n        if (_.isEmpty(serverDoc.writtenByStubs)) {\n          // All methods whose stubs wrote this method have completed! We can\n          // now copy the saved document to the database (reverting the stub's\n          // change if the server did not write to this object, or applying the\n          // server's writes if it did).\n\n          // This is a fake ddp 'replace' message.  It's just for talking\n          // between livedata connections and minimongo.  (We have to stringify\n          // the ID because it's supposed to look like a wire message.)\n          self._pushUpdate(updates, written.collection, {\n            msg: 'replace',\n            id: MongoID.idStringify(written.id),\n            replace: serverDoc.document\n          });\n          // Call all flush callbacks.\n          _.each(serverDoc.flushCallbacks, function (c) {\n            c();\n          });\n\n          // Delete this completed serverDocument. Don't bother to GC empty\n          // IdMaps inside self._serverDocuments, since there probably aren't\n          // many collections and they'll be written repeatedly.\n          self._serverDocuments[written.collection].remove(written.id);\n        }\n      });\n      delete self._documentsWrittenByStub[methodId];\n\n      // We want to call the data-written callback, but we can't do so until all\n      // currently buffered messages are flushed.\n      var callbackInvoker = self._methodInvokers[methodId];\n      if (!callbackInvoker)\n        throw new Error(\"No callback invoker for method \" + methodId);\n      self._runWhenAllServerDocsAreFlushed(\n        _.bind(callbackInvoker.dataVisible, callbackInvoker));\n    });\n  },\n\n  _process_ready: function (msg, updates) {\n    var self = this;\n    // Process \"sub ready\" messages. \"sub ready\" messages don't take effect\n    // until all current server documents have been flushed to the local\n    // database. We can use a write fence to implement this.\n    _.each(msg.subs, function (subId) {\n      self._runWhenAllServerDocsAreFlushed(function () {\n        var subRecord = self._subscriptions[subId];\n        // Did we already unsubscribe?\n        if (!subRecord)\n          return;\n        // Did we already receive a ready message? (Oops!)\n        if (subRecord.ready)\n          return;\n        subRecord.ready = true;\n        subRecord.readyCallback && subRecord.readyCallback();\n        subRecord.readyDeps.changed();\n      });\n    });\n  },\n\n  // Ensures that \"f\" will be called after all documents currently in\n  // _serverDocuments have been written to the local cache. f will not be called\n  // if the connection is lost before then!\n  _runWhenAllServerDocsAreFlushed: function (f) {\n    var self = this;\n    var runFAfterUpdates = function () {\n      self._afterUpdateCallbacks.push(f);\n    };\n    var unflushedServerDocCount = 0;\n    var onServerDocFlush = function () {\n      --unflushedServerDocCount;\n      if (unflushedServerDocCount === 0) {\n        // This was the last doc to flush! Arrange to run f after the updates\n        // have been applied.\n        runFAfterUpdates();\n      }\n    };\n    _.each(self._serverDocuments, function (collectionDocs) {\n      collectionDocs.forEach(function (serverDoc) {\n        var writtenByStubForAMethodWithSentMessage = _.any(\n          serverDoc.writtenByStubs, function (dummy, methodId) {\n            var invoker = self._methodInvokers[methodId];\n            return invoker && invoker.sentMessage;\n          });\n        if (writtenByStubForAMethodWithSentMessage) {\n          ++unflushedServerDocCount;\n          serverDoc.flushCallbacks.push(onServerDocFlush);\n        }\n      });\n    });\n    if (unflushedServerDocCount === 0) {\n      // There aren't any buffered docs --- we can call f as soon as the current\n      // round of updates is applied!\n      runFAfterUpdates();\n    }\n  },\n\n  _livedata_nosub: function (msg) {\n    var self = this;\n\n    // First pass it through _livedata_data, which only uses it to help get\n    // towards quiescence.\n    self._livedata_data(msg);\n\n    // Do the rest of our processing immediately, with no\n    // buffering-until-quiescence.\n\n    // we weren't subbed anyway, or we initiated the unsub.\n    if (!_.has(self._subscriptions, msg.id))\n      return;\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    var errorCallback = self._subscriptions[msg.id].errorCallback;\n    var stopCallback = self._subscriptions[msg.id].stopCallback;\n\n    self._subscriptions[msg.id].remove();\n\n    var meteorErrorFromMsg = function (msgArg) {\n      return msgArg && msgArg.error && new Meteor.Error(\n        msgArg.error.error, msgArg.error.reason, msgArg.error.details);\n    }\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    if (errorCallback && msg.error) {\n      errorCallback(meteorErrorFromMsg(msg));\n    }\n\n    if (stopCallback) {\n      stopCallback(meteorErrorFromMsg(msg));\n    }\n  },\n\n  _process_nosub: function () {\n    // This is called as part of the \"buffer until quiescence\" process, but\n    // nosub's effect is always immediate. It only goes in the buffer at all\n    // because it's possible for a nosub to be the thing that triggers\n    // quiescence, if we were waiting for a sub to be revived and it dies\n    // instead.\n  },\n\n  _livedata_result: function (msg) {\n    // id, result or error. error has error (code), reason, details\n\n    var self = this;\n\n    // Lets make sure there are no buffered writes before returning result.\n    if (!_.isEmpty(self._bufferedWrites)) {\n      self._flushBufferedWrites();\n    }\n\n    // find the outstanding request\n    // should be O(1) in nearly all realistic use cases\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      Meteor._debug(\"Received method result but no methods outstanding\");\n      return;\n    }\n    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n    var m;\n    for (var i = 0; i < currentMethodBlock.length; i++) {\n      m = currentMethodBlock[i];\n      if (m.methodId === msg.id)\n        break;\n    }\n\n    if (!m) {\n      Meteor._debug(\"Can't match method response to original method call\", msg);\n      return;\n    }\n\n    // Remove from current method block. This may leave the block empty, but we\n    // don't move on to the next block until the callback has been delivered, in\n    // _outstandingMethodFinished.\n    currentMethodBlock.splice(i, 1);\n\n    if (_.has(msg, 'error')) {\n      m.receiveResult(new Meteor.Error(\n        msg.error.error, msg.error.reason,\n        msg.error.details));\n    } else {\n      // msg.result may be undefined if the method didn't return a\n      // value\n      m.receiveResult(undefined, msg.result);\n    }\n  },\n\n  // Called by MethodInvoker after a method's callback is invoked.  If this was\n  // the last outstanding method in the current block, runs the next block. If\n  // there are no more methods, consider accepting a hot code push.\n  _outstandingMethodFinished: function () {\n    var self = this;\n    if (self._anyMethodsAreOutstanding())\n      return;\n\n    // No methods are outstanding. This should mean that the first block of\n    // methods is empty. (Or it might not exist, if this was a method that\n    // half-finished before disconnect/reconnect.)\n    if (! _.isEmpty(self._outstandingMethodBlocks)) {\n      var firstBlock = self._outstandingMethodBlocks.shift();\n      if (! _.isEmpty(firstBlock.methods))\n        throw new Error(\"No methods outstanding but nonempty block: \" +\n                        JSON.stringify(firstBlock));\n\n      // Send the outstanding methods now in the first block.\n      if (!_.isEmpty(self._outstandingMethodBlocks))\n        self._sendOutstandingMethods();\n    }\n\n    // Maybe accept a hot code push.\n    self._maybeMigrate();\n  },\n\n  // Sends messages for all the methods in the first block in\n  // _outstandingMethodBlocks.\n  _sendOutstandingMethods: function() {\n    var self = this;\n    if (_.isEmpty(self._outstandingMethodBlocks))\n      return;\n    _.each(self._outstandingMethodBlocks[0].methods, function (m) {\n      m.sendMessage();\n    });\n  },\n\n  _livedata_error: function (msg) {\n    Meteor._debug(\"Received error from server: \", msg.reason);\n    if (msg.offendingMessage)\n      Meteor._debug(\"For: \", msg.offendingMessage);\n  },\n\n  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {\n    var self = this;\n    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;\n    self._outstandingMethodBlocks = [];\n\n    self.onReconnect();\n\n    if (_.isEmpty(oldOutstandingMethodBlocks))\n      return;\n\n    // We have at least one block worth of old outstanding methods to try\n    // again. First: did onReconnect actually send anything? If not, we just\n    // restore all outstanding methods and run the first block.\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;\n      self._sendOutstandingMethods();\n      return;\n    }\n\n    // OK, there are blocks on both sides. Special case: merge the last block of\n    // the reconnect methods with the first block of the original methods, if\n    // neither of them are \"wait\" blocks.\n    if (!_.last(self._outstandingMethodBlocks).wait &&\n        !oldOutstandingMethodBlocks[0].wait) {\n      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {\n        _.last(self._outstandingMethodBlocks).methods.push(m);\n\n        // If this \"last block\" is also the first block, send the message.\n        if (self._outstandingMethodBlocks.length === 1)\n          m.sendMessage();\n      });\n\n      oldOutstandingMethodBlocks.shift();\n    }\n\n    // Now add the rest of the original blocks on.\n    _.each(oldOutstandingMethodBlocks, function (block) {\n      self._outstandingMethodBlocks.push(block);\n    });\n  },\n\n  // We can accept a hot code push if there are no methods in flight.\n  _readyToMigrate: function() {\n    var self = this;\n    return _.isEmpty(self._methodInvokers);\n  },\n\n  // If we were blocking a migration, see if it's now possible to continue.\n  // Call whenever the set of outstanding/blocked methods shrinks.\n  _maybeMigrate: function () {\n    var self = this;\n    if (self._retryMigrate && self._readyToMigrate()) {\n      self._retryMigrate();\n      self._retryMigrate = null;\n    }\n  }\n});\n\nLivedataTest.Connection = Connection;\n\n// @param url {String} URL to Meteor app,\n//     e.g.:\n//     \"subdomain.meteor.com\",\n//     \"http://subdomain.meteor.com\",\n//     \"/\",\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n\n/**\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere\n * @param {String} url The URL of another Meteor application.\n */\nDDP.connect = function (url, options) {\n  var ret = new Connection(url, options);\n  allConnections.push(ret); // hack. see below.\n  return ret;\n};\n\n// Hack for `spiderable` package: a way to see if the page is done\n// loading all the data it needs.\n//\nallConnections = [];\nDDP._allSubscriptionsReady = function () {\n  return _.all(allConnections, function (conn) {\n    return _.all(conn._subscriptions, function (sub) {\n      return sub.ready;\n    });\n  });\n};\n","/**\n * @namespace DDP\n * @summary Namespace for DDP-related methods/classes.\n */\nexport const DDP = {};\nexport const LivedataTest = {};\n","export class MongoIDMap extends IdMap {\n  constructor() {\n    super(\n      MongoID.idStringify,\n      MongoID.idParse,\n    );\n  }\n}\n"]}